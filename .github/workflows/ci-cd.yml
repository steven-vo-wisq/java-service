name: Java Service CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Set up Node (for redoc-cli bundling)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        shell: bash

      - name: Clean, build & generate OpenAPI JSON
        # The org.springdoc.openapi-gradle-plugin exposes generateOpenApiDocs
        run: |
          ./gradlew clean generateOpenApiDocs --no-daemon -x test
        shell: bash

      - name: Show build files (sanity)
        run: |
          echo "Listing build directory"
          ls -la build || true
          echo "Looking for common OpenAPI outputs"
          ls -la build/openapi.json || true
          ls -la build/apidoc/openapi.json || true
        shell: bash

      - name: Ensure OpenAPI JSON is at build/apidoc/openapi.json
        run: |
          # prefer plugin default: build/openapi.json, otherwise check build/apidoc/openapi.json
          mkdir -p build/apidoc
          if [ -f build/openapi.json ]; then
            cp build/openapi.json build/apidoc/openapi.json
            echo "Copied build/openapi.json -> build/apidoc/openapi.json"
          elif [ -f build/apidoc/openapi.json ]; then
            echo "Found build/apidoc/openapi.json (left as-is)"
          else
            echo "ERROR: No OpenAPI JSON found (looked for build/openapi.json and build/apidoc/openapi.json)"
            exit 1
          fi
        shell: bash

      - name: Set PROJECT_VERSION environment variable
        id: set_version
        run: |
          # read project version from Gradle properties output
          VERSION=$(./gradlew -q properties --no-daemon | grep "^version:" | awk '{print $2}')
          if [ -z "$VERSION" ]; then
            echo "Could not detect project version, default to 'untagged'"
            VERSION="untagged"
          fi
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "project_version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Bundle single-file HTML docs with redoc-cli
        run: |
          echo "Bundling single-file HTML with redoc-cli (npx)"
          mkdir -p build/apidoc
          JSON_PATH=build/apidoc/openapi.json
          OUT_HTML=build/apidoc/docs-${PROJECT_VERSION}.html
          if [ ! -f "$JSON_PATH" ]; then
            echo "ERROR: $JSON_PATH not found"
            exit 1
          fi
          # use npx to avoid global installs
          npx --yes redoc-cli@0.13.2 bundle -o "$OUT_HTML" "$JSON_PATH"
          # copy JSON next to HTML for convenience
          cp -f "$JSON_PATH" build/apidoc/docs-${PROJECT_VERSION}.json
          echo "Generated $OUT_HTML and copied JSON"
        shell: bash
        env:
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}

      - name: Show generated apidoc files
        run: ls -la build/apidoc || true
        shell: bash

      - name: Checkout api-docs repository
        uses: actions/checkout@v4
        with:
          repository: steven-vo-wisq/api-docs
          token: ${{ secrets.GITHUB_TOKEN }}
          path: api-docs

      - name: Copy OpenAPI files into api-docs
        run: |
          if [ ! -f build/apidoc/openapi.json ]; then
            echo "ERROR: build/apidoc/openapi.json not found, aborting copy."
            exit 1
          fi
          if [ ! -f build/apidoc/docs-${PROJECT_VERSION}.html ]; then
            echo "ERROR: build/apidoc/docs-${PROJECT_VERSION}.html not found, aborting copy."
            exit 1
          fi

          mkdir -p api-docs/slack-service/main
          cp -v build/apidoc/openapi.json api-docs/slack-service/main/${PROJECT_VERSION}.json
          cp -v build/apidoc/docs-${PROJECT_VERSION}.html api-docs/slack-service/main/${PROJECT_VERSION}.html

          # Force copy to main.json and main.html (latest)
          cp -f build/apidoc/openapi.json api-docs/slack-service/main/main.json
          cp -f build/apidoc/docs-${PROJECT_VERSION}.html api-docs/slack-service/main/main.html

          echo "Files copied into api-docs/slack-service/main/"
        shell: bash
        env:
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}

      - name: Commit changes to api-docs
        working-directory: api-docs
        env:
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
        run: |
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          git checkout main || git switch -c main
          git add slack-service/main/*
          # only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "chore(docs): update OpenAPI from slack-service ($PROJECT_VERSION)"
          # push using PAT stored in secrets (ensure PERSONAL_ACCESS_TOKEN has repo write permission)
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/steven-vo-wisq/api-docs HEAD:main --force
        shell: bash

      - name: Tag version
        continue-on-error: false
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.PROJECT_VERSION }}
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix') ) }}
