name: Java Service CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle Wrapper
      run: |
        # Create directory structure
        mkdir -p gradle/wrapper

        # Download wrapper JAR with verification
        echo "Downloading Gradle wrapper JAR..."
        curl -L --fail -v -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/master/gradle/wrapper/gradle-wrapper.jar

        # Verify the file was downloaded successfully
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ] || [ ! -s "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "Primary download failed, trying alternative source..."
          curl -L --fail -v -o gradle/wrapper/gradle-wrapper.jar https://services.gradle.org/distributions/gradle-wrapper.jar
        fi

        # Final verification
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ] || [ ! -s "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "Failed to download gradle-wrapper.jar"
          exit 1
        fi

        echo "Gradle wrapper JAR downloaded successfully. Size: $(ls -lh gradle/wrapper/gradle-wrapper.jar | awk '{print $5}')"

        # Create wrapper properties file if missing
        if [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
          cat > gradle/wrapper/gradle-wrapper.properties << EOL
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOL
        echo "Created gradle-wrapper.properties file"
        fi
        
        # List the files in the wrapper directory to confirm
        ls -la gradle/wrapper/
      shell: bash

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash

    - name: clean, compile, run tests, scan libraries, generate documentation
      run: ./gradlew clean test assemble
      shell: bash

    - name: set project version var
      shell: bash
      run: |
        echo "PROJECT_VERSION=$(./gradlew properties -q | grep "^version:" | awk '{print $2}')" >> $GITHUB_ENV

    - name: generate doc
      run: |
        if test -f "build/apidoc/openapi.json"; then
          sudo npm install -g redoc-cli@0.13.2
          redoc-cli bundle -o build/apidoc/docs-${PROJECT_VERSION}.html build/apidoc/openapi.json
          cp build/apidoc/openapi.json build/apidoc/docs-${PROJECT_VERSION}.json
        fi
      shell: bash
      if: steps.check_api_doc.outputs.files_exists == 'true'

    - name: Checkout api-docs repository
      uses: actions/checkout@v4
      with:
        repository: steven-vo-wisq/api-docs
        token: ${{ secrets.GITHUB_TOKEN }}
        path: api-docs

    - name: Copy OpenAPI files into api-docs
      run: |
        mkdir -p api-docs/slack-service/main
        cp -v build/apidoc/openapi.json api-docs/slack-service/main/${{ env.PROJECT_VERSION }}.json
        cp -v build/apidoc/docs-${{ env.PROJECT_VERSION }}.html api-docs/slack-service/main/${{ env.PROJECT_VERSION }}.html
        
        # Force copy to main.json and main.html (latest version)
        cp -f build/apidoc/openapi.json api-docs/slack-service/main/main.json
        cp -f build/apidoc/docs-${{ env.PROJECT_VERSION }}.html api-docs/slack-service/main/main.html

    - name: Commit changes to api-docs
      working-directory: api-docs
      env:
        GIT_AUTHOR_NAME: "github-actions[bot]"
        GIT_AUTHOR_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
      run: |
        git config user.name "$GIT_AUTHOR_NAME"
        git config user.email "$GIT_AUTHOR_EMAIL"
        git checkout main
        git add .
        git commit -m "chore(docs): update openapi from slack-service"
        git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/steven-vo-wisq/api-docs HEAD:main --force

    - name: Tag version
      continue-on-error: false
      uses: tvdias/github-tagger@v0.0.1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.PROJECT_VERSION }}
      if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix') ) }}