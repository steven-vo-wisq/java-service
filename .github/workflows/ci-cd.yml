on:
  push:
    branches: [ main, feature/*, bugfix/*, task/*, PROD-* ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      newServiceVersion: ${{ steps.set-env-var.outputs.PROJECT_VERSION }}
    steps:
      - name: Check out the main repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11 if 17 is not specified
        if: ${{ inputs.java_version == '' || inputs.java_version != '17' }}
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up JDK 17 if specified
        if: ${{ inputs.java_version == '17' }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Docker Buildx
        id: buildx
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/setup-buildx-action@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: gradle caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: set project version var
        shell: bash
        run: |
          VERSION=$(grep -m 1 "^version\s*=" build.gradle | sed "s/version\s*=\s*[\'\"]\(.*\)[\'\"]/\1/")
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      # Create git tag when merged to main OR to a branch prefixed with 'hotfix'
      - name: tag
        continue-on-error: false
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          tag: ${{ env.PROJECT_VERSION }}
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix') ) }}

      - name: generate doc
        run: |
          if test -f "build/apidoc/openapi.json"; then
            sudo npm install -g redoc-cli@0.13.2
            redoc-cli bundle -o build/apidoc/docs-${{ env.PROJECT_VERSION }}.html build/apidoc/openapi.json
            cp build/apidoc/openapi.json build/apidoc/docs-${{ env.PROJECT_VERSION }}.json
          fi
        shell: bash
        if: steps.check_api_doc.outputs.files_exists == 'true'

      - name: publish docs
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: build/apidoc
          target-folder: ${{env.PUB_DIR}}
          clean: false
        if: steps.check_api_doc.outputs.files_exists == 'true'